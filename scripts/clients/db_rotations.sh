#!/bin/bash
# Database credential rotation client script for thiccboi
# Uses AppRole auth to access Vault

set -e

# Configuration
LOG_FILE="/var/log/vault-clients/db-rotation.log"
CRED_FILE="/etc/vault-clients/db-rotation-creds.json"
CONFIG_DIR="/etc/vault-clients"
mkdir -p "$(dirname "$LOG_FILE")" "$(dirname "$CRED_FILE")" "$CONFIG_DIR"

# Function to log messages
log() {
    echo "[$(date)] $1" | tee -a "$LOG_FILE"
}

# Colorful output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Read credentials from file generated by Terraform
if [ -f "$CONFIG_DIR/client_credentials.json" ]; then
    log "Reading credentials from file"
    ROLE_ID=$(jq -r '.database_rotation.role_id' "$CONFIG_DIR/client_credentials.json")
    SECRET_ID=$(jq -r '.database_rotation.secret_id' "$CONFIG_DIR/client_credentials.json")
    NAMESPACE=$(jq -r '.database_rotation.namespace' "$CONFIG_DIR/client_credentials.json")
else
    # Fallback to environment variables
    log "Using environment variables for credentials"
    ROLE_ID=${VAULT_ROLE_ID:-""}
    SECRET_ID=${VAULT_SECRET_ID:-""}
    NAMESPACE=${VAULT_NAMESPACE:-"admin/client_population/databases"}
fi

VAULT_ADDR=${VAULT_ADDR:-"https://vault.example.com:8200"}

log "Starting database credential rotation with AppRole auth"
log "Vault address: $VAULT_ADDR"
log "Namespace: $NAMESPACE"

# Login with AppRole
log "Authenticating with AppRole"
VAULT_TOKEN=$(curl -s \
    --request POST \
    --header "X-Vault-Namespace: $NAMESPACE" \
    --data "{\"role_id\":\"$ROLE_ID\",\"secret_id\":\"$SECRET_ID\"}" \
    "$VAULT_ADDR/v1/auth/approle/login" | jq -r '.auth.client_token')

if [ -z "$VAULT_TOKEN" ] || [ "$VAULT_TOKEN" == "null" ]; then
    log "${RED}Authentication failed!${NC}"
    exit 1
fi

log "${GREEN}Authentication successful!${NC}"

# Get database credentials
log "Requesting database credentials"
DB_CREDS=$(curl -s \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --header "X-Vault-Namespace: $NAMESPACE" \
    "$VAULT_ADDR/v1/database/creds/readonly")

if [ $? -ne 0 ] || [ -z "$DB_CREDS" ]; then
    log "${RED}Failed to get database credentials!${NC}"
    exit 1
fi

# Extract username and password
DB_USERNAME=$(echo "$DB_CREDS" | jq -r '.data.username')
DB_PASSWORD=$(echo "$DB_CREDS" | jq -r '.data.password')
LEASE_ID=$(echo "$DB_CREDS" | jq -r '.lease_id')

if [ -z "$DB_USERNAME" ] || [ "$DB_USERNAME" == "null" ]; then
    log "${RED}Failed to extract username from response!${NC}"
    exit 1
fi

# Save credentials to file (in production, use a secure method)
echo "$DB_CREDS" > "$CRED_FILE"
chmod 600 "$CRED_FILE"

log "${GREEN}Successfully retrieved database credentials!${NC}"
log "Username: $DB_USERNAME"
log "Password: [REDACTED]"
log "Lease ID: $LEASE_ID"

# Simulated database connection test
log "${YELLOW}Testing connection to database...${NC}"
sleep 2  # Simulate connection time
log "${GREEN}Connection successful!${NC}"

# In a real script, you would use these credentials to connect to your database
# For example:
# mysql -u "$DB_USERNAME" -p"$DB_PASSWORD" -h database.example.com

# Perform simulated rotation - in production, this would be a real rotation
log "Simulating credential rotation operations..."
echo "{\"username\": \"$DB_USERNAME\", \"last_rotation\": \"$(date -Iseconds)\"}" > /tmp/last_rotation.json

log "${GREEN}Database credential rotation complete!${NC}"
log "================================================"

# Display fancy completion message
cat << "EOF"
 ____        _        _                    
|  _ \  __ _| |_ __ _| |__   __ _ ___  ___ 
| | | |/ _` | __/ _` | '_ \ / _` / __|/ _ \
| |_| | (_| | || (_| | |_) | (_| \__ \  __/
|____/ \__,_|\__\__,_|_.__/ \__,_|___/\___|
                                           
 ____       _        _   _                 
|  _ \ ___ | |_ __ _| |_(_) ___  _ __      
| |_) / _ \| __/ _` | __| |/ _ \| '_ \     
|  _ < (_) | || (_| | |_| | (_) | | | |    
|_| \_\___/ \__\__,_|\__|_|\___/|_| |_|    
                                           
EOF

# Cleanup
exit 0